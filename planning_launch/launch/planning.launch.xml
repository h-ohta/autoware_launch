<launch>
  <arg name="use_foa" default="false" />
  <arg name="use_perfect_lane_change" default="true" />

  <!-- planning module -->

  <!-- pointcloud container -->
  <arg name="use_pointcloud_container" default="false"/>
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="cruise_planner_type" default="obstacle_stop_planner"/>

  <group>
    <let name="disuse_foa" value="false" if="$(var use_foa)"/>
    <let name="disuse_foa" value="true" unless="$(var use_foa)"/>

    <push-ros-namespace namespace="planning"/>
    <!-- mission planning module -->
    <group>
      <push-ros-namespace namespace="mission_planning"/>
      <include file="$(find-pkg-share planning_launch)/launch/mission_planning/mission_planning.launch.xml"/>
    </group>

    <!-- scenario planning module -->
    <group>
      <push-ros-namespace namespace="scenario_planning"/>
      <include file="$(find-pkg-share planning_launch)/launch/scenario_planning/scenario_planning.launch.xml">
        <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
        <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>
        <arg name="cruise_planner_type" value="$(var cruise_planner_type)" />
        <arg name="disuse_foa" value="$(var disuse_foa)" />
        <arg name="use_perfect_lane_change" value="$(var use_perfect_lane_change)" />
      </include>
    </group>

    <!-- planning error monitor -->
    <group>
      <push-ros-namespace namespace="planning_diagnostics"/>
      <include file="$(find-pkg-share planning_launch)/launch/planning_diagnostics/planning_error_monitor.launch.xml">
      </include>
    </group>

    <!-- planning debug tools -->
    <group>
      <push-ros-namespace namespace="planning_debug_tools"/>
      <include file="$(find-pkg-share planning_debug_tools)/launch/stop_reason_visualizer.launch.xml">
      </include>
    </group>
  </group>
</launch>
